{"version":3,"sources":["components/table.js","App.js","serviceWorker.js","index.js"],"names":["Table","_ref","data","react_default","a","createElement","header","map","th","value","link","href","target","rel","key","uniqid","className","row","td","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedOption","table","handleChange","setState","createTable","localStorage","setItem","JSON","stringify","init","mentors","tasks","options","keys","mentor","label","_this2","headerRow","dataRows","students","forEach","stud","push","concat","sort","b","orderIndex","task","arr","mark","status","undefined","prevMentor","getItem","parse","react_select_esm","onChange","Component","Boolean","window","location","hostname","match","fetch","then","response","json","result","ReactDOM","render","src_App_0","document","getElementById","catch","error","alert","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae581c13.chunk.js","sourcesContent":["import React from 'react';\r\nimport uniqid from 'uniqid';\r\n// props:{\r\n//   header:[{value:'value', className:'className',link:'url'},...],\r\n//   data:[[{value:'value', className:'className',link:'url'},{value:'value', className:'className'},...],\r\n//        [{value:'value', className:'className'},{value:'value', className:'className'},...]],\r\n// }\r\n const Table = ({ data }) => (\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n    {data.header.map((th)=>{\r\n      let value;\r\n      if (th.link) value = (<a href={th.link} target=\"_blank\" rel=\"noopener noreferrer\">{th.value}</a>)\r\n      else value = th.value;\r\n      return (\r\n        <th key={uniqid()} className={th.className}>\r\n        {value}\r\n        </th>)})}\r\n   </tr>\r\n    </thead>\r\n    \r\n   <tbody>\r\n     {data.data.map((row)=>{\r\n     return (\r\n      <tr key={uniqid()}>\r\n      {row.map((td)=>{\r\n        let value;\r\n        if (td.link) value = (<a href={td.link} target=\"_blank\" rel=\"noopener noreferrer\">{td.value}</a>)\r\n        else value = td.value;\r\n        return (\r\n          <td key={uniqid()} className={td.className}>\r\n          {value}\r\n          </td>)})}\r\n     </tr>\r\n     )\r\n   })}\r\n   </tbody>\r\n   \r\n  </table>\r\n)\r\n\r\nexport default Table;","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Table from './components/table'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    selectedOption: null,\n    table: {\n      header:[],\n      data:[]\n    },\n  }\n  \n  constructor(props) {\n    super(props);\n    this.init(props);\n  }\n\n  init(props){\n    if (props.data) {\n      this.mentors = props.data.mentors;\n      this.tasks = props.data.tasks;\n      this.options = Object.keys(this.mentors).map((mentor)=>{\n        return { value: mentor, label: mentor }\n      })\n    }\n  }\n\n  createTable (mentor) {\n    const headerRow = [{value:'Tasks/Students'}];\n    const dataRows = [];\n    const students = Object.keys(this.mentors[mentor]);\n    students.forEach((stud)=>headerRow.push({value:stud,link:`https://github.com/${stud}`}));\n    Object.keys(this.tasks)\n    .sort((a,b)=>this.tasks[a].orderIndex-this.tasks[b].orderIndex)\n    .forEach((task)=>{\n      const arr = [];\n      arr.push({value:task, link:this.tasks[task].link});\n      students.forEach((stud)=>{\n        let mark = this.mentors[mentor][stud][task];\n        let status = this.tasks[task].status;\n        if (status === 'checked' && mark === undefined) {\n          status = 'checkASAP';\n        }\n        if (!status) {\n          status = 'todo';\n        }\n        arr.push({value:mark,className:status});\n      })\n      dataRows.push(arr);\n    })\n    return {\n      header:headerRow,\n      data:dataRows,\n    }\n  }\n\n  componentDidMount() {\n    const prevMentor = localStorage.getItem('mentor');\n    if (prevMentor) {\n      const selectedOption = JSON.parse(prevMentor);\n      this.setState({ selectedOption, table: this.createTable(selectedOption.value) });\n    }\n  }\n\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption, table: this.createTable(selectedOption.value) });\n    localStorage.setItem('mentor', JSON.stringify(selectedOption));\n  }\n  \n  render() {\n    const { selectedOption } = this.state;\n    return (\n      <div className=\"App\">\n          <Select\n          value={selectedOption}\n          onChange={this.handleChange}\n          options={this.options}\n        />\n        <Table data = {this.state.table} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfetch('./data.json')\n  .then((response)=>response.json())\n  .then((result)=>{\n    ReactDOM.render(<App data={result} />, document.getElementById('root'));\n  })\n  .catch(error => {\n    alert(error); // Error: Not Found\n  });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}